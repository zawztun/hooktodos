{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuid","TextField","label","type","name","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","key","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","filter","ReactDOM","render","document","getElementById"],"mappings":"0SA4CeA,MApCf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACLC,mBAAS,CAC/BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJgB,mBACtBC,EADsB,KAChBC,EADgB,KAsB7B,OACE,0BAAMC,UAAU,YAAYC,SAhB9B,SAAsBC,GACpBA,EAAEC,iBAEEL,EAAKF,KAAKQ,SACZX,EAAQ,2BAAKK,GAAN,IAAYH,GAAIU,iBACvBN,EAAQ,2BAAKD,GAAN,IAAYF,KAAM,SAYzB,kBAACU,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOZ,EAAKF,KACZe,SAbN,SAA+BT,GAG7BH,EAAQ,2BAAKD,GAAN,IAAYF,KAAMM,EAAEU,OAAOF,YAYhC,kBAACG,EAAA,EAAD,CAAQL,KAAK,UAAb,Y,qDCPSM,MA3Bf,YAAqD,IAArChB,EAAoC,EAApCA,KAAMiB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WASpC,OACE,kBAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,QAAS,SAC1B,kBAACC,EAAA,EAAD,CAAUC,QAASvB,EAAKD,UAAWyB,QAVvC,WACEP,EAAejB,EAAKH,OAUlB,kBAAC4B,EAAA,EAAD,CACEC,QAAQ,OACRN,MAAO,CACLO,eAAgB3B,EAAKD,UAAY,eAAiB,OAGnDC,EAAKF,MAER,kBAAC8B,EAAA,EAAD,CAAYJ,QAfhB,WACEN,EAAWlB,EAAKH,MAeZ,kBAAC,IAAD,SCNOgC,MAff,YAA0D,IAAtCC,EAAqC,EAArCA,MAAOZ,EAA8B,EAA9BA,WAAYD,EAAkB,EAAlBA,eACrC,OACE,kBAACc,EAAA,EAAD,KACGD,EAAME,KAAI,SAAAhC,GAAI,OACb,kBAAC,EAAD,CACEiC,IAAKjC,EAAKH,GACVG,KAAMA,EACNkB,WAAYA,EACZD,eAAgBA,SCiDXiB,MAtDf,WAAgB,IAAD,EACatC,mBAAS,IADtB,mBACNkC,EADM,KACCK,EADD,KAuCb,OApCAC,qBAAU,WAER,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAPvB,0BAQlBJ,GACFF,EAASE,KAEV,IAEHD,qBAAU,WAERI,aAAaE,QAfS,wBAekBJ,KAAKK,UAAUb,MACtD,CAACA,IA0BF,yBAAK5B,UAAU,OACb,kBAACuB,EAAA,EAAD,CAAYL,MAAO,CAAEwB,QAAS,IAAMlB,QAAQ,MAA5C,eAGA,kBAAC,EAAD,CAAU/B,QA5Bd,SAAiBK,GAEfmC,EAAS,CAACnC,GAAF,mBAAW8B,QA2BjB,kBAAC,EAAD,CACEA,MAAOA,EACPZ,WAZN,SAAoBrB,GAClBsC,EAASL,EAAMe,QAAO,SAAA7C,GAAI,OAAIA,EAAKH,KAAOA,OAYtCoB,eA3BN,SAAwBpB,GACtBsC,EACEL,EAAME,KAAI,SAAAhC,GACR,OAAIA,EAAKH,KAAOA,EACP,2BACFG,GADL,IAEED,WAAYC,EAAKD,YAGdC,WChCf8C,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.26a7a138.chunk.js","sourcesContent":["  \nimport { Button, TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport {v4 as uuid} from \"uuid\";\n\n// uuid(); \n//if your uuid is not working call that function  => uuid(); \n\nfunction TodoForm({ addTodo }) {\n  const [todo, setTodo] = useState({\n    id: \"\",\n    task: \"\",\n    completed: false\n  });\n\n  function handleSubmit(e) {\n    e.preventDefault(); // prevents browser refresh\n    // trim() gets rid of string whitespace\n    if (todo.task.trim()) {\n      addTodo({ ...todo, id: uuid() });\n      setTodo({ ...todo, task: \"\" });\n    }\n  };\n  \n  function handleTaskInputChange(e) {\n    // e.target.value contains new input from onChange\n    // event for input elements\n    setTodo({ ...todo, task: e.target.value });\n  };\n\n  return (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n      <TextField\n        label=\"Task\"\n        type=\"text\"\n        name=\"task\"\n        value={todo.task}\n        onChange={handleTaskInputChange}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </form>\n  );\n}\n\nexport default TodoForm;\n\n","  \nimport { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport React from \"react\";\n\nfunction Todo({ todo, toggleComplete, removeTodo }) {\n  function handleCheckboxClick() {\n    toggleComplete(todo.id);\n  }\n\n  function handleRemoveClick() {\n    removeTodo(todo.id);\n  }\n\n  return (\n    <ListItem style={{ display: \"flex\" }}>\n      <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\n      <Typography\n        variant=\"body\"\n        style={{\n          textDecoration: todo.completed ? \"line-through\" : null\n        }}\n      >\n        {todo.task}\n      </Typography>\n      <IconButton onClick={handleRemoveClick}>\n        <CloseIcon />\n      </IconButton>\n    </ListItem>\n  );\n}\n\nexport default Todo;\n\n","  \nimport { List } from \"@material-ui/core\";\nimport React from \"react\";\nimport Todo from \"./Todo\";\n\nfunction TodoList({ todos, removeTodo, toggleComplete }) {\n  return (\n    <List>\n      {todos.map(todo => (\n        <Todo\n          key={todo.id}\n          todo={todo}\n          removeTodo={removeTodo}\n          toggleComplete={toggleComplete}\n        />\n      ))}\n    </List>\n  );\n}\n\nexport default TodoList;\n","import Typography from \"@material-ui/core/Typography\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n  \n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo(todo) {\n    \n    setTodos([todo, ...todos]);\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    );\n  }\n\n  function removeTodo(id) {\n    setTodos(todos.filter(todo => todo.id !== id))\n  };\n\n  return (\n    <div className=\"App\">\n      <Typography style={{ padding: 14 }} variant=\"h3\">\n        My TodoList \n      </Typography>\n      <TodoForm addTodo={addTodo} />\n      <TodoList\n        todos={todos}\n        removeTodo={removeTodo}\n        toggleComplete={toggleComplete}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}